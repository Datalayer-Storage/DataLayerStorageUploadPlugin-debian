name: Build Binaries

on:
  push:
    tags:
      - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Binaries
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            artifact-name: datalayer-storage-uploader-linux-x64
            build-command: npm run create-linux-x64-dist

    steps:
      - name: Clean workspace
        uses: Chia-Network/actions/clean-workspace@main

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.13'

      - name: npm install
        run: npm install

      - name: npm cache clear --force
        run: npm cache clear --force

      - name: npm cache rm
        run: npm cache rm --force

      - name: npm cache verify
        run: npm cache verify

      - name: create distributions
        run: ${{ matrix.build-command }}

      - name: Make executable
        run: chmod +x dist/*
 
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ github.workspace }}/dist

  debs:
    name: Build ${{ matrix.name }} deb
    runs-on: ubuntu-latest
    needs:
      - build

    strategy:
      matrix:
        include:
          - name: datalayer-storage-uploader-linux-x64
            os: linux_x64  # this must match the out-path directory in package.json
            platform: amd64

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

      - name: Get tag name
        id: tag-name
        run: |
          echo "TAGNAME=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      - name: Build .deb
        env:
          DATALAYER_STORAGE_UPLOADER_VERSION: ${{ steps.tag-name.outputs.TAGNAME }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          pip install j2cli
          CLI_DEB_BASE="datalayer-storage-uploader_${{ steps.tag-name.outputs.TAGNAME }}-1_${PLATFORM}"
          mkdir -p "deb/$CLI_DEB_BASE/opt/datalayer-storage-uploader"
          mkdir -p "deb/$CLI_DEB_BASE/usr/bin"
          mkdir -p "deb/$CLI_DEB_BASE/etc/systemd/system"
          mkdir -p "deb/$CLI_DEB_BASE/DEBIAN"
          j2 -o "deb/$CLI_DEB_BASE/DEBIAN/control" build-scripts/deb/control.j2
          cp -r ${{ matrix.name }}/${{ matrix.os }} "deb/$CLI_DEB_BASE/opt/datalayer-storage-uploader/datalayer-storage-uploader"
          cp build-scripts/deb/datalayer-storage-uploader@.service deb/$CLI_DEB_BASE/etc/systemd/system/datalayer-storage-uploader@.service
          cp build-scripts/deb/update_config.py "deb/$CLI_DEB_BASE/opt/datalayer-storage-uploader/update_config.py"
          cp build-scripts/deb/postinst "deb/$CLI_DEB_BASE/DEBIAN/postinst"
          chmod +x deb/$CLI_DEB_BASE/opt/datalayer-storage-uploader/datalayer-storage-uploader
          ln -s ../../opt/datalayer-storage-uploader/datalayer-storage-uploader "deb/$CLI_DEB_BASE/usr/bin/datalayer-storage-uploader"
          chmod 755 deb/$CLI_DEB_BASE/DEBIAN/postinst  # make postinst script executable
          dpkg-deb --build --root-owner-group "deb/$CLI_DEB_BASE"

      - name: Upload deb
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}-deb
          path: ${{ github.workspace }}/deb/*.deb

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - debs
      - build

    steps:
      - uses: chrislennon/action-aws-cli@v1.1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: datalayer-storage-uploader-linux-x64
          path: datalayer-storage-uploader-linux-x64

      - name: Download Linux x64 deb
        uses: actions/download-artifact@v3
        with:
          name: datalayer-storage-uploader-linux-x64-deb
          path: datalayer-storage-uploader-linux-x64-deb

      - name: Get tag name
        id: tag-name
        run: echo "TAGNAME=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      - name: Create zips
        run: |
          zip -r datalayer-storage-uploader-linux-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip datalayer-storage-uploader-linux-x64
      
      - name: Upload to S3 with checksum
        run: |
          linuxFile=datalayer-storage-uploader-linux-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip
          linuxChecksum=$(md5sum "$linuxFile" | cut -d ' ' -f 1)
          aws s3 cp "$linuxFile" s3://dlaas/releases/ --metadata md5="$linuxChecksum"
          aws s3 cp "$linuxFile" s3://dlaas/releases/datalayer-storage-uploader-linux-x64-latest.zip --metadata md5="$linuxChecksum"
          for deb_file in datalayer-storage-uploader-linux-x64-deb/*.deb; do
            if [ -f "$deb_file" ]; then
              deb_checksum=$(md5sum "$deb_file" | cut -d ' ' -f 1)
              aws s3 cp "$deb_file" s3://dlaas/releases/ --metadata md5="$deb_checksum"
              aws s3 cp "$deb_file" s3://dlaas/releases/datalayer-storage-uploader-linux-x64-deb-latest.deb --metadata md5="$deb_checksum"
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'


